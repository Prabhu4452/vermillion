openapi: 3.0.3
info:
  version: 1.0.0
  title: Vermilllion API Documentaion
  termsOfService: 'https://example.com/terms/'
  contact:
    email: pct960@gmail.com
    url: 'https://vermillion.datasetu.org'
  license:
    name: datasetu
    url: 'https://github.com/datasetu/vermillion/blob/master/LICENSE'
  x-logo:
    url: 'https://github.com/datasetu/vermillion/blob/master/images/logo.png'
  description: Vermillion is a resource server which provides both data provider and data cosnumer API's. Namely- latest, download, publish and search API's. Out of all these publish API let's data provider publish the data and rest all API's provides data requested by data consumers.

tags:
  - name: Consumer
    description: A data consumer is the end user who requests data by sending request Id's(resource id, which are associated with data).
  - name: Provider
    description: A data provider is the one who provides data to consumers by checking validity of the their tokens.

servers:
  - url: 'https://vermillion.datasetu.org'

paths:
  /download?id=Id&token=token:
    get:
      tags:
       - Consumer
      description: This endpoint gives a consumer accesss to download the data. It takes request Id and token as query parameters and id is optional parameter.
      operationId: download
      parameters:
        - name: token
          in: query
          required: true
          description: token given by auth server to consumer
          schema:
            type: string
            example: "auth.local/36a83204ea6ad6690a0eccda0f37e153"
          allowReserved: true
        - name: Id
          in: query
          description: Id given by consumer. All data that is associated With this Id will be downloaded. Data can be a file or JSON object. Since id is optional, so when id is absent in query params all the data is downloaded.
          schema:
            type: string
            example: "rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public"
          allowReserved: true
      responses:
        200:
          description: Consumer successfully downloads the data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/download'
        400:
          $ref: '#/components/responses/BAD-REQUEST'
        404:
          $ref: '#/components/responses/NOT-FOUND'
        403:
          $ref: '#/components/responses/UNAUTHORIZED'
        500:
          $ref: '#/components/responses/INTERNAL-SERVER'

  /latest:
    get:
      tags:
        - Consumer
      description: This endpoint gives a consumer accesss to look the latest data.
      operationId: latest
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id:
                  type: string
                  description: resourceId's are typically associated with data and are provided by data provider.
                  example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource'
      responses:
        200:
          description: Consumer retrieves the requested data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/latest'
        400:
          $ref: '#/components/responses/BAD-REQUEST'
        404:
          $ref: '#/components/responses/NOT-FOUND'
        403:
          $ref: '#/components/responses/UNAUTHORIZED'
        500:
          $ref: '#/components/responses/INTERNAL-SERVER'
  /publish?id=Id&token=token:
    post:
      tags:
        - Provider
      description: This endpoint gives a consumer accesss to publish the data into database. It takes id & token as parameters.
      operationId: publish
      parameters:
        - name: Id
          in: query
          required: true
          description: An ID is a resourceId that is typically associated with data and is provided by data provider.
          schema:
            type: string
            example: "rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource"
          allowReserved: true
        - name: token
          in: query
          required: true
          description: token accessed by data provider
          schema:
            type: string
            example: "auth.local/36a83204ea6ad6690a0eccda0f37e179"
          allowReserved: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: resourceId's are typically associated with data and are provided by data provider.
                  example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource'
                timestamp:
                  type: string
                  description: The current time at which the data/file is being published into data base
                  example: '2021-03-03T10:18:00.952628Z'
                data:
                  type: object
                  description: The data that is pushed into database and it is in JSON format
                  example: '{"data" : { "Name" : "Prabs"}}'
                coordinates:
                  type: string
                  description: Coordinates
                  example: '[56.898989,67,4939]'
                category:
                  type: string
                  description: category under which resource Id/data falls into.
                  example: camera,drone etc
              required:
                - id
                - data
      responses:
         201:
           description: 201 created
           content:
              application/json:
                schema:
                  $ref: '#/components/schemas/publish'
         400:
           $ref: '#/components/responses/BAD-REQUEST'
         404:
           $ref: '#/components/responses/NOT-FOUND'
         403:
           $ref: '#/components/responses/UNAUTHORIZED'
         409:
           $ref: '#/components/responses/CONFLICT'
         500:
           $ref: '#/components/responses/INTERNAL-SERVER'
  /search/?token="token":
    post:
      tags:
        - Consumer
      description: This endpoint gives a consumer accesss to search for the data. Typically it takes "token" as search query param. It's request body contains id(String), time(Json), geoDistance(Json) and attribute(Json) contents.
      operationId: Search
      parameters:
        - name: token
          in: query
          required: true
          description: the token given by datasetu auth server to accesss the data and it is part of query param in search endpoint
          schema:
            type: string
            example: "auth.local/36a83204ea6ad6690a0eccda0f37e179"
          allowReserved: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/idAndTime'
                - $ref: '#/components/schemas/idAndgeoDistance'
                - $ref: '#/components/schemas/idAndAttribute'
                - $ref: '#/components/schemas/idAndAttributeAndTime'
      responses:
        201:
          description: 201 created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/search'
        400:
          $ref: '#/components/responses/BAD-REQUEST'
        404:
          $ref: '#/components/responses/NOT-FOUND'
        403:
          $ref: '#/components/responses/UNAUTHORIZED'
        409:
          $ref: '#/components/responses/CONFLICT'
        500:
         $ref: '#/components/responses/INTERNAL-SERVER'

security:
  - datasetu-auth-server:
      - read_data
components:
  securitySchemes:
    BasicAuth:
      type: http
      description: The datasetu-auth-server exchanges certificates, keys between data provider and consumer. A data provider sets some policies on resource Id's with read and write scopes. Once consumer requests access for resource Id's by exchangeing consumer certficates, keys with provider. If consumer certificates & keys are found valid, data provider issues a token which is valid for specified time.
      scheme: basic
  schemas:
    idAndTime:
      description: This is a combination of id and time in search API.
      type: object
      properties:
        id:
          type: string
          description: The resource ID which determines resource that needs to be accessed
          example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource'
        time:
          type: object
          description: time is a jsonObject. It has start & end keys.
          $ref: '#/components/schemas/time'
      required:
        - id
        - time
    idAndgeoDistance:
      description: This is a combination of id and geoDistane in search API
      type: object
      properties:
        id:
          type: string
          description: The resource ID which determines resource that needs to be accessed
          example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource'
        geoDistance:
          type: object
          description: geoDistance is a json Object and it has coordinates & distances as keys.
          $ref: '#/components/schemas/geoDistance'
      required:
        - id
        - geoDistance
    idAndAttribute:
      description: This is a combination of id and Attribute in search API
      type: object
      properties:
        id:
          type: string
          description: The resource ID which determines resource that needs to be accessed
          example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource'
        attribute:
          type: object
          description: attribute is json object which has three sub parts/keys- min, max and term.
          $ref: '#/components/schemas/attribute'
      required:
        - id
        - attribute
    idAndAttributeAndTime:
      description: This is a combination of id and Attribute in search API.
      type: object
      properties:
        id:
          type: string
          description: The resource ID which determines resource that needs to be accessed
          example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource'
        attribute:
          type: object
          description: Attribute is json object which has three sub parts/keys- min, max and term.
          $ref: '#/components/schemas/attribute'
        time:
          type: object
          description: time is a jsonObject. It has start & end keys.
          $ref: '#/components/schemas/time'
      required:
        - id
        - attribute
        - time

    download:
      description: schema for download data
      type: object
      properties:
        data:
          type: object
          description: This can be any data in a JSON format.
          example: { "data": { "Project": "Vermillion","ApiDocs": "Redoc", "Definition": "OpenAPI" } }
        timestamp:
          type: string
          description: timestamp is the time at which the data was published into database.
          example: '2021-03-06T10:18:00.952628Z'
        id:
          type: string
          description: id is a resourceId which is typically associated with data.
          example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'
        category:
          type: string
          description: category defines what type of category the resourceId/data falls into.
          example: test-category
    latest:
      description: schema for latest data
      type: object
      properties:
        data:
          type: object
          description: This can be any data in a JSON format.
          example: { "data": { "Project": "Vermillion","ApiDocs": "Redoc", "Definition": "OpenAPI" } }
        timestamp:
          type: string
          description: timestamp is the time at which the data was published into database.
          example: '2021-03-05T10:18:00.952628Z'
        id:
          type: string
          description: id is a resourceId which is typically associated with data.
          example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'
        category:
          type: string
          description: category defines what type of category the resourceId/data falls into.
          example: test-category
    publish:
      description: HTTP 201, Created.
    search:
      description: schema for searchWithIdAndTime data.
      type: object
      properties:
        data:
          type: object
          description: This can be any data in a JSON format.
          example: {"data": {"Project": "Vermillion","ApiDocs": "Redoc", "Definition": "OpenAPI"}}
        timestamp:
          type: string
          description: timestamp is the time at which the data was published into database.
          example: '2021-03-03T10:18:00.952628Z'
        id:
          type: string
          description: id is a resourceId which is typically associated with data.
          example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'
        category:
          type: string
          description: category defines what type of category the resourceId/data falls into.
          example: test-category
        mime-type:
          type: string
          example: application/json
    attribute:
      description: In attribute json object, term key is mandatory & either min or max must be present as second key.
      type: object
      properties:
        term:
          type: string
          example: 'speed'
          description: term can be any string that is searched upon. Let us assume, speed is term search, then min & max can be any relevant numerical values
        min:
          type: string
          example: '30'
          description: min determines minimum decimal value quoted in string
        max:
          type: string
          example: '60'
          description: max determines maximum decimal value quoted in string
      required:
        - term
    geoDistance:
      description: In geoDistance json object both co-ordinates & distance are mandatory.
      type: object
      properties:
        co-ordinates:
          type: string
          example: '82.9739, 25.3176'
          description: co-ordinates should be quoted in string. For example, '82.9739, 25.3176'
        distance:
          type: string
          example: '600m'
          description: disances should end in either cm, m or km. For example, 30m
      required:
        - co-ordinates
        - distance
    time:
      description: In time json object both start and end are mandatory.
      type: object
      properties:
        start:
          type: string
          example: '2021-02-3'
          description: start time should be in 'yyyy-mm-dd' format
        end:
          type: string
          example: '2021-03-3'
          description: end time should be in 'yyyy-mm-dd' format.
      required:
        - start
        - end
  responses:
    BAD-REQUEST:
      description: The request is Invalid- Bad request. One of the query param/ request body is incorrect.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: '400'
              message:
                type: string
                example: 'Invalid Request'
            required:
              - code
              - message
    NOT-FOUND:
      description: schema for Data not found. The significance is, the requested data is not found in database.
      content:
        application/json:
          schema:
            type: object
            properties:
                code:
                  type: string
                  example: '404'
                message:
                  type: string
                  example: 'Data not found'
            required:
              - code
              - message
    UNAUTHORIZED:
      description: schema for Forbidden/Unauthorized access. User is unauthorized because of token invalid/expiry or bot intervention.
      content:
        application/json:
          schema:
            type: object
            properties:
                code:
                  type: string
                  example: '403'
                message:
                  type: string
                  example: 'Unauthorized'
            required:
              - code
              - message
    CONFLICT:
      description: schema for Conflict.
      content:
        application/json:
          schema:
            type: object
            properties:
                code:
                  type: string
                  example: '409'
                message:
                  type: string
                  example: 'Conflict'
            required:
              - code
              - message
    INTERNAL-SERVER:
      description: schema for Internal Server. One of the applications is not up and running.
      content:
        application/json:
          schema:
            type: object
            properties:
                code:
                  type: string
                  example: '500'
                message:
                  type: string
                  example: 'Internal server'
            required:
              - code
              - message
