#!/usr/bin/python

import argparse
import requests
import json
from requests.adapters import HTTPAdapter
import urllib3
import logging
import multiprocessing as mp
import partition as p
import random

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

logger = logging.getLogger(__name__)

base_url	=   "https://"
node_list	=   []
owner_endpoint	=   "/admin/register-owner"
entity_endpoint	=   "/owner/register-entity"

output	    =	mp.Queue()

reading = \
"""
{{
  &quot;FloodSensor&quot;: {{
    &quot;DANGER&quot;: &quot;1.0&quot;,
    &quot;CUR_LEVEL&quot;: &quot;0.05&quot;,
    &quot;STATUS&quot;: &quot;Normal&quot;,
    &quot;LASTUPDATEDATETIME&quot;: &quot;2019-06-21T11:02:16.635+05:30&quot;,
    &quot;SITE_STATUS&quot;: &quot;Active&quot;,
    &quot;ALERT&quot;: &quot;0.5&quot;,
    &quot;STATION_ID&quot;: &quot;FWR023&quot;,
    &quot;NAME&quot;: &quot;{name}&quot;
  }}
}}
"""
session = \
"""
<session name="{name}" probability="{prob}" type="ts_http">
<for from="1" to="10000" incr="1" var="counter">
    <request>
	<http url="/entity/publish" method="POST" contents="{reading}">
	    <http_header name="id" value="{entity}"/>
            <http_header name="apikey" value="{apikey}"/>
            <http_header name="to" value="{entity}"/>
            <http_header name="subject" value="test"/>
            <http_header name="message-type" value="protected"/>
            <http_header name="content-type" value="application/json"/>
        </http>
    </request>
</for>
</session>
"""

parser = argparse.ArgumentParser(description="Specifications to generate the tsung config file")

parser.add_argument(
    "-p",
    "--producers",
    action="store",
    dest="producers",
    type=int,
    help="No. of to use to publish datapoints",
    )

parser.add_argument(
    "-n",
    "--nodes",
    action="store",
    dest="nodes",
    type=int,
    help="No. of nodes to use for parallel registrations",
    )

args = parser.parse_args()
producers= int(args.producers)
nodes= int(args.nodes)

if nodes == 1:
    node_list = ["localhost"]
else:
    node_list =	["node-"+str(i) for i in range(1,nodes+1)]

name_list   =   list(open("list","r").read()[:-1].split("\n"))
apikey	    =	open("../../single-node/.env","r").readline()[:-1].split("=")[1]

owner_keys = {}
device_keys = {}

for owner_name in name_list:
    print("Registering owner: {0}".format(owner_name))
    headers = {"id": "admin", "apikey": apikey, "owner": owner_name, "is-autonomous": "true"}
    owner_url = base_url + random.choice(node_list) + owner_endpoint
    r = requests.post(url=owner_url, headers=headers, verify=False)
    owner_keys[owner_name] = r.json()["apikey"]

f = open("owner_keys", "w")
f.write(json.dumps(owner_keys))
f.close()

def register(bounds):

    global device_keys

    start   =	bounds[0]
    end	    =	bounds[1]

    for i in range(start,end):
        owner = name_list[i%26]
        dev_name = "dev"+str(i)
	print("Registering device: {0}".format(owner+"/"+dev_name))
        headers = {"id": owner, "apikey": owner_keys[owner], "entity": dev_name, "is-autonomous": "true"}
	entity_url = base_url + random.choice(node_list) + entity_endpoint
        r = requests.post(url=entity_url, headers=headers, data="{}", verify=False)
        device_keys[owner+"/"+dev_name] = r.json()["apikey"]

    output.put(device_keys)

workers	    =   int(mp.cpu_count())*2
range_list  =   p.ranges(producers, workers)
pool	    =   mp.Pool(workers)
processes   =   pool.map(register, range_list)

results	    =	[output.get() for p in processes]

for element in results:
    for device, apikey in element.items():
	device_keys[device] = apikey

f = open("device_keys", "w")
f.write(json.dumps(device_keys))
f.close()

session_str = ""

probability = 100.0/float(producers)

for device,apikey in device_keys.items():

    current_reading =	reading.format	(   name=device
					)
    current_session =	session.format	(   name=device, 
					    prob=probability, 
					    reading=current_reading,
					    entity=device, 
					    apikey= apikey
					)

    session_str = session_str + current_session + "\n"

template    =	open("template.xml","r").read()

template    =	template	+		\
		"<sessions>"	+   "\n"    +	\
		session_str	+   "\n"    +	\
		"</sessions>"	+   "\n"    +	\
		"</tsung>"

f = open("out.xml", "w")
f.write(template)
f.close()

