openapi: 3.1.0
info:
  version: 1.0.0
  title: Vermilllion API Documentation
  termsOfService: 'https://example.com/terms/'
  contact:
    email: pct960@gmail.com
    url: 'https://vermillion.datasetu.org'
  license:
    name: datasetu
    url: 'https://github.com/datasetu/vermillion/blob/master/LICENSE'
  x-logo:
    url: 'https://github.com/datasetu/vermillion/raw/master/images/logo.png'
    backgroundColor: "#FFFFFF"
    altText: "Vermillion logo"
  description: Vermillion is a high-performance, scalable and secure open-source data exchange platform developed using Vertx. It is a general-purpose resource-server that data providers and consumers can use to exchange time-series as well as static datasets. Vermillion exposes a simple search interface that can be used to query resources using various parameters like time, geo-coordinates, full-text or any combination of these parameters.

tags:
  - name: Consumer
    description: A data consumer is any user or entity which is interested in a data resource that vermillion hosts (or acts as a intermediary for). Consumers discover resources on the datasetu catalogue and use search interface to query the datasets

  - name: Provider
    description: A data provider is any user or entity which is responsible for a dataset that vermillion hosts. Providers can be data owners or have delegated access to act as custodians for resources. Providers upload details, access mechanisms, license and other metadata of resources onto the datasetu catalogue. Also, they manage access control rules for their resources on the datasetu auth server. Providers use the publish interface of vermillion to upload datasets and dynamic metadata associated with it.

servers:
  - url: 'https://vermillion.datasetu.org'

paths:
  /download?id=Id&token=token:
    get:
      tags:
       - Consumer
      description: This endpoint is meant for downloading secure file datasets for which access has been obtained beforehand. If the fully-qualified resource ID is known then this endpoint can be invoked from programs or from user-agents like ``curl``. Otherwise, invoking the endpoint with just an access token will bring up an HTML page containing a list of the datasets. Furthermore, this API can be used in two modes. In the first mode, a specific resource ID or a specific set of resource IDs can be requested (a subset of the resources that the token has authorisation to). They will be then be made available on the consumer's directory which can then be downloaded. In the second mode, the consumer can simply pass an access token, and all resources that the token has authorisation to will be made available in the consumer's directory. The pre-condition for the second mode is that the token presented must not have authorisation to heterogenous resources, i.e., a mixture of time-series datasets and files.
      operationId: download
      security:
        - datasetu-auth-server: [read]
      parameters:
        - name: token
          in: query
          required: true
          description: A token granted by the datasetu auth server to access resources.
          schema:
            type: string
            example: "auth.local/36a83204ea6ad6690a0eccda0f37e153"
          allowReserved: true
        - name: id
          in: query
          description: A fully qualified resource name obtained from the datasetu catalogue. Id can be given as one single id or multiple ids separated by a comma.
          schema:
            type: string
            example: "rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public"
          allowReserved: true
      responses:
        200:
          description: Consumer successfully downloads the data
          content:
            text/plain:
              schema:
                type: string
              example: This contains the data which resides in a static file.
        400:
          $ref: '#/components/responses/BAD-REQUEST'
        404:
          $ref: '#/components/responses/NOT-FOUND'
        403:
          $ref: '#/components/responses/UNAUTHORIZED'
        500:
          $ref: '#/components/responses/INTERNAL-SERVER'

  /latest:
    get:
      tags:
        - Consumer
      description: This API is for getting the latest datapoint of a resource. This is typically meant to be used on time-series datasets. However, it could be used to query the latest metadata of static files as well. It supports both open and secure datasets. An access token is required in the latter case.
      operationId: latest
      security:
        - datasetu-auth-server: [read]
      parameters:
        - name: id
          in: query
          required: true
          description: A fully qualified resource name obtained from the datasetu catalogue.
          schema:
            type: string
            example: "rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource"
          allowReserved: true
        - name: token
          in: query
          required: false
          description: An access token granted by the datasetu auth server
          schema:
            type: string
            example: "auth.local/36a83204ea6ad6690a0eccda0f37e179"
          allowReserved: true
      responses:
        200:
          description: Consumer retrieves the requested data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/latest'
        400:
          $ref: '#/components/responses/BAD-REQUEST'
        404:
          $ref: '#/components/responses/NOT-FOUND'
        403:
          $ref: '#/components/responses/UNAUTHORIZED'
        500:
          $ref: '#/components/responses/INTERNAL-SERVER'
  /publish?id=Id&token=token:
    post:
      tags:
        - Provider
      description: This endpoint gives a consumer accesss to publish the data into database. It takes id & token as parameters.
      operationId: publish
      security:
        - datasetu-auth-server: [write]
      parameters:
        - name: Id
          in: query
          required: true
          description: A fully qualified resource name obtained from the datasetu catalogue.
          schema:
            type: string
            example: "rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource"
          allowReserved: true
        - name: token
          in: query
          required: true
          description: token accessed by data provider
          schema:
            type: string
            example: "auth.local/36a83204ea6ad6690a0eccda0f37e179"
          allowReserved: true
      requestBody:
        description: |
          #### Publish-timeSeriesData
          Any data that is in JSON format will be published.
          #### Publish-staticData
          Any file that has static data will be published and is in form-data format.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publish-timeSeriesData'

          multipart/form-data:
            schema:
              $ref: '#/components/schemas/publish-staticData'

      responses:
         201:
           description: 201 created
           content:
              text/plain:
                schema:
                  type: string
                example: HTTP 201, Created.
         400:
           $ref: '#/components/responses/BAD-REQUEST'
         404:
           $ref: '#/components/responses/NOT-FOUND'
         403:
           $ref: '#/components/responses/UNAUTHORIZED'
         500:
           $ref: '#/components/responses/INTERNAL-SERVER'
  /search/?token="token":
    post:
      tags:
        - Consumer
      description: This API provides a search interface for the data hosted on vermillion. Both public and secure datasets can be queried using this API, with an access token being required in the latter case. This interface provides options to query using time, geo-spatial co-ordinates, text or any combination of these. Resource Id is a mandatory field across all search types. Along with the resource Id, at least one of the other three parameters is necessary for the search query.
      operationId: Search
      security: 
        - datasetu-auth-server: [read]
      parameters:
        - name: token
          in: query
          required: false
          description: A token granted by the datasetu auth server to access resources.
          schema:
            type: string
            example: "auth.local/36a83204ea6ad6690a0eccda0f37e179"
          allowReserved: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/time-series'
                - $ref: '#/components/schemas/geo-spatial'
                - $ref: '#/components/schemas/attribute-search'
                - $ref: '#/components/schemas/complex-search'
        description: |
          #### Time-series Search
          This can be used to query resources using a time-based filter. This filter can be clubbed with other search filters as well.
          #### Geo-spatial Search
          This can be used to query resources using a geo-spatial filter, i.e., using geo co-ordinates. This filter can be clubbed with other search filters as well.
          #### Attribute Search
          This can be used to query resources using a text-based or numeric filter. This filter can be clubbed with other search filters as well.<br/><br/>
      responses:
        200:
          description: The requested resources as a JSON array.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search'
        400:
          $ref: '#/components/responses/BAD-REQUEST'
        404:
          $ref: '#/components/responses/NOT-FOUND'
        403:
          $ref: '#/components/responses/UNAUTHORIZED'
        500:
         $ref: '#/components/responses/INTERNAL-SERVER'
  /consumer/token:
    get:
      tags:
        - Consumer
      description: The consumer endpoint allows a consumer to see all the files/datasets that consumer is interested in. It takes token as parameter. This API will be made use of only when download endpoint is hit in first place.
      operationId: consumer
      security:
        - datasetu-auth-server: [read]
      parameters:
        - name: token
          in: path
          required: true
          description: A token granted by the datasetu auth server to access resources.
          schema:
            type: string
            example: "auth.local/36a83204ea6ad6690a0eccda0f37e179"
          allowReserved: true
      responses:
        200:
          description: Consumer sees all the files/datasets that consumer is interested in.
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
              example: [ rbccps.org, iisc.com ]

        404:
          $ref: '#/components/responses/NOT-FOUND'
  /provider/public/id:
    get:
      tags:
        - Consumer
      description: This API allows a consumer to see all the public files/datasets that provider has exposed them publicly.
      operationId: provider
      security:
        - datasetu-auth-server: [read]
      parameters:
        - name: id
          in: path
          description: A fully qualified resource name obtained from the datasetu catalogue.
          schema:
            type: string
            example: "rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource"
          allowReserved: true
      responses:
        200:
          description: Consumer sees one or more public files/datasets that provider has provided publicly.
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
              example: [rbccps.org, iisc.com]


security:
  - datasetu-auth-server:
      - read
      - write
components:
  securitySchemes:
    datasetu-auth-server:
      type: apiKey
      in: query
      name: token
      scopes:
        read: Grants read access to resources
        write: Grants write access to resources
      description: The datasetu-auth-server is the authentication, authorisation and accounting (AAA) server of Datasetu. Data providers can set fine-grained access control policies to regulate access to their resources/datasets. Data consumers can request access tokens to get access to resources. For more information please refer to [Datasetu Auth Server](https://datasetu.github.io/auth/index.html) documentation.
      scheme: custom

  schemas:
    publish-timeSeriesData:
      type: object
      properties:
        timestamp:
          type: string
          description: The time at which the data/file is being published.
          example: '2021-03-03T10:18:00.952628Z'
        data:
          type: object
          description: The data that is pushed into database and it is in JSON format
          example: '{"data" : { "Name" : "Prabs"}}'
        coordinates:
          type: array
          items:
            type: string
          description: An array of co-ordinates specified as [longitude, latitude].
          example: [ '56.898989', '67.4939' ]
      required:
        - data
    publish-staticData:
      properties:
        file:
          description: All the static files that needs to be published
          type: string
          format: binary
          example: 'Users/prabhupatrot/Downloads/A gentle guide to asynchronous programming with Eclipse Vert.x for Java developers.pdf'
        metadata:
          description: Metadata details specific to the uploaded file as a json.
          type: string
          format: binary
          example: 'Users/prabhupatrot/Downloads/metadata.json'
    resourceId-array:
      type: array
      items:
        type: string
        description: A json array of resourceIds.
      example: ['rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public', 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource-1']
    resourceId:
      description: A fully qualified resource name obtained from the datasetu catalogue. If resource ID is not ending with '.public', then query should have token mandatorily.
      type: string
      example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'
    time-series:
      type: object
      properties:
        id:
          oneOf:
            - $ref: '#/components/schemas/resourceId'
            - $ref: '#/components/schemas/resourceId-array'
        time:
          type: object
          $ref: '#/components/schemas/time'
      required:
        - id
        - time
    geo-spatial:
      type: object
      properties:
        id:
          oneOf:
            - $ref: '#/components/schemas/resourceId'
            - $ref: '#/components/schemas/resourceId-array'
        geoDistance:
          type: object
          $ref: '#/components/schemas/geoDistance'
      required:
        - id
        - geoDistance
    attribute-search:
      type: object
      properties:
        attribute:
          oneOf:  #If one-of has schemas of type object then give the description here itself. If description is given in subsequent schema object it wont work.
            - $ref: '#/components/schemas/attribute-text'
            - $ref: '#/components/schemas/attribute-numeric'
          description: In the 'attribute-text' based search, term & value parameters are mandatory and in the 'attribute-numeric' based search, term, min & max keys are mandatory.
        id:
          oneOf:
            - $ref: '#/components/schemas/resourceId'
            - $ref: '#/components/schemas/resourceId-array'
      required:
        - id
        - attribute
    complex-search:
      description: This is the example of complex search which uses all combination of time-series, geo-spatial & attribute based search.
      type: object
      properties:
        id:
          oneOf:
            - $ref: '#/components/schemas/resourceId'
            - $ref: '#/components/schemas/resourceId-array'
        attribute:
          type: object
          description: Attribute is json object which has three sub parts/keys- min, max and term.
          oneOf:
            - $ref: '#/components/schemas/attribute-text'
            - $ref: '#/components/schemas/attribute-numeric'
        time:
          type: object
          description: Time is a jsonObject. It has start & end keys.
          $ref: '#/components/schemas/time'
      required:
        - id
        - attribute
        - time

    download:
      description: schema for download data
      type: string
      example: Hey this is a sample text for download API testing.
    latest:
      description: schema for latest data
      type: object
      properties:
        data:
          type: object
          description: This can be any data in a JSON format.
          example: { "data": { "Project": "Vermillion","ApiDocs": "Redoc", "Definition": "OpenAPI" } }
        timestamp:
          type: string
          description: timestamp is the time at which the data was published into database.
          example: '2021-03-05T10:18:00.952628Z'
        id:
          type: string
          description: id is a resourceId which is typically associated with data.
          example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'
        category:
          type: string
          description: category defines what type of category the resourceId/data falls into.
          example: test-category

    search:
      description: schema for search API response.
      type: object
      properties:
        data:
          type: object
          description: This can be any free-form data of the resource in JSON format.
          example: {"data": {"Project": "Vermillion","ApiDocs": "Redoc", "Definition": "OpenAPI"}}
        timestamp:
          type: string
          description: Timestamp at which the data was recorded.
          example: '2021-03-03T10:18:00.952628Z'
        id:
          type: string
          description: A fully qualified id of the resource.
          example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'
        category:
          type: string
          description: A broad category into which resourceId/data falls into.
          example: test-category
        co-ordinates:
          type: array
          description: An array of co-ordinates in [longitude, latitude] format.
          example: ['56.9', '76.5']
        mime-type:
          type: string
          example: application/json
    attribute-numeric:
      type: object
      properties:
        term:
          type: string
          example: 'speed'
          description: Term can be any key that is present in the dataset that needs to be searched for.
        min:
          type: string
          example: '30'
          description: The minimum numeric value of the term that the consumer is interested in.
        max:
          type: string
          example: '60'
          description: The maximum numeric value of the term that the consumer is interested in.
      required:
        - term
        - min
        - max
    attribute-text:
      type: object
      properties:
        term:
          type: string
          example: 'car-type'
          description: Term can be any key that is present in the dataset that needs to be searched for.
        value:
          type: string
          example: 'SUV'
          description: The specific value of the term that the consumer is interested in.
      required:
        - term
        - value
    geoDistance:
      description: Used to perform a circular geo-spatial search with the specified co-ordinates as the center and distance as the radius of the circle. Returns all the resources (with other filters applied, if any) lying inside the circle.
      type: object
      properties:
        co-ordinates:
          type: array
          example: ['82.9739', '25.3176']
          description: An array of co-ordinates specified as [longitude, latitude].
        distance:
          type: string
          example: '600m'
          description: Distance should be specified in metres.
      required:
        - co-ordinates
        - distance
    time:
      description: A jsonObject specifying the start and end times.
      type: object
      properties:
        start:
          type: string
          example: '2021-02-3'
          description: Starting timestamp of the time filter. It could be in any valid time format.
        end:
          type: string
          example: '2021-03-3'
          description: Ending timestamp of the time filter. It could be in any valid time format.
      required:
        - start
        - end

  responses:
    BAD-REQUEST:
      description: The request is malformed. One or more required parameters are invalid in the request.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: '400'
              message:
                type: string
                example: 'Invalid Request'
            required:
              - code
              - message
    NOT-FOUND:
      description: The requested resource /endpoint is not found on the server.
      content:
        application/json:
          schema:
            type: object
            properties:
                code:
                  type: string
                  example: '404'
                message:
                  type: string
                  example: 'Data not found'
            required:
              - code
              - message
    UNAUTHORIZED:
      description: Access to the requested resource(s) is forbidden due to invalid token or inadequate permissions.
      content:
        application/json:
          schema:
            type: object
            properties:
                code:
                  type: string
                  example: '403'
                message:
                  type: string
                  example: 'Unauthorized'
            required:
              - code
              - message
    INTERNAL-SERVER:
      description: The resource server currently is unable to handle the request. Please try again.
      content:
        application/json:
          schema:
            type: object
            properties:
                code:
                  type: string
                  example: '500'
                message:
                  type: string
                  example: 'Internal server'
            required:
              - code
              - message
